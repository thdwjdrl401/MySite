<html layout:decorate="~{layout}">
  <div layout:fragment="content" class="container my-3">
    <script type="text/javascript" src="js/d3.js"></script>
    <script th:inline="javascript">
            	  /*<![CDATA[*/
                window.onload = function () {
            		drawMask("#container");
            		putImage("#map");
                   // drawMap("#container");

                };
 				  var width = 500; //지도의 넓이
                  var height = 700; //지도의 높이
                  var initialScale = 5550; //확대시킬 값
                  var initialX = -12100; //초기 위치값 X
                  var initialY = 4050; //초기 위치값 Y
                  
                  
                  
                  
             function drawMask(target) {
				 
				
                                   

                  var projection = d3.geo
                    .mercator()
                    .scale(initialScale)
                    .translate([initialX, initialY]);
                  var path = d3.geo.path().projection(projection);
                  var zoom = d3.behavior
                    .zoom()
                    .translate(projection.translate())
                    .scale(projection.scale())
                    .scaleExtent([height, 800 * height])
                    .on("zoom", zoom);

                  var svg = d3
                    .select(target)
                    .append("svg")
                    .attr("width", width + "px")
                    .attr("height", height + "px")
                    .attr("id", "map")
                    .attr("class", "map");


                  var states = svg.append("g").attr("id", "states").call(zoom);

                  states
                    .append("rect")
                    .attr("class", "background")
                    .attr("width", width + "px")
                    .attr("height", height + "px");


                    //mask  그리기
                    d3.json("json/korea.json", function (json){
              		states
              		.append("defs")
              		.selectAll("clipPath")
              		.data(json.features)
                    .enter()
                    .append("clipPath")
                    .attr("id", function (d) {
                        return "mask-" + d.properties.name_eng;
                      })
                    .append("path")
                    .attr("d", path)
                    .attr("id", function (d) {
                        return "path-" + d.properties.name_eng;})
                      ;
                    });





                }

             function putImage(target) {


                   var projection = d3.geo
                    .mercator()
                    .scale(initialScale)
                    .translate([initialX, initialY]);


                  var path = d3.geo.path().projection(projection);
               //   console.log(path);




                  var name=[];
                  var svg = d3
                           .select(target);

                      var urls = [[${dto.urls}]];
                      var locations = [[${dto.locations}]];
            		var min;
            	   		// console.log(urls[2]);


                     var x =   d3.json("json/korea.json", function (json){


//path의 최대 최소 구하기
            var min_x=[];
            var max_x=[];
            var min_y=[];
            var max_y=[];


            for(var j = 0;j<json.features.length;j++){

            	var str = path(json.features[j]);
            	str = str.substring(1, str.length-1);

            	str = str.split("L");
            	console.log(str);
            	
            	for(var i = 0 ; i<str.length;i++){

            		if (i==0){
            			 min_x[j]= Number(str[i].split(",")[0].split(".")[0]);
            			max_x[j] = Number(str[i].split(",")[0].split(".")[0]);
            			min_y[j] = Number(str[i].split(",")[1].split(".")[0]);
            			max_y[j] = Number(str[i].split(",")[1].split(".")[0]);

            		}
					else{
						
            			if(min_x[j] > Number(str[i].split(",")[0].split(".")[0])){
            					   min_x[j] = Number(str[i].split(",")[0].split(".")[0]);

            			}
            		   	if(max_x[j] < Number(str[i].split(",")[0].split(".")[0])){
            					   max_x[j] = Number(str[i].split(",")[0].split(".")[0]);	

	            		}
   	    	     		if(min_y[j] > Number(str[i].split(",")[1].split(".")[0])){
    	        				   min_y[j] = Number(str[i].split(",")[1].split(".")[0]);

            			}
            		   	if(max_y[j] < Number(str[i].split(",")[1].split(".")[0])){
            					   max_y[j] = Number(str[i].split(",")[1].split(".")[0]);
	
    	        		}


					}


           		 }


            }




       //   console.log(min_x); console.log(max_x); console.log(min_y);  console.log(max_y);




                       svg
                          .selectAll("clip-path")
                           .data(json.features)
                          .enter()                          
                          .append("g")
                          .attr("clip-path",  function (d) {
                          return "url(#mask-" +  d.properties.name_eng+")";})
                          .attr("style", "position:absolute;")                          
                          .append("a")
                          .attr("class", "link")
                          .attr("href", function (d) {
                          return  "http://"+location.host+"/map/modify/"+ d.properties.name_eng;})
                          .append("image")
                          .attr("class", "map-image")
                          .attr("id", function (d) {
                          return "img-" + d.properties.name_eng;})
                          .attr("xlink:href",function (d,i){
                          return urls[i];})
             			  .attr("width", function (d,i){
                          return max_x[i]-min_x[i]+"px";})
                 		  .attr("height",  function (d,i){
                          return max_y[i]-min_y[i];;})
                          .attr("preserveAspectRatio", "none")

                 		  .attr("x", function (d,i){
                          return min_x[i];})

                 		  .attr("y",function (d,i){
                          return min_y[i];});
 





                });



      }
      const onlongclick = ($target, duration, callback) => {
  $target.onmousedown = () => {
    const timer = setTimeout(callback, duration);
  
    $target.onmouseup = () => {
      clearTimeout(timer);
    };
  };  
  $target.ontouchstart = () => {
    const timer = setTimeout(callback, duration);
  
    $target.ontouchend = () => {
      clearTimeout(timer);
    };
  };  
}
const $target = document.querySelector('.link');

onlongclick($target, 300, () => {
  alert('Long Click');
});

                //지도 그리기
                function drawMap(target) {

                  var labels;

                  var projection = d3.geo
                    .mercator()
                    .scale(initialScale)
                    .translate([initialX, initialY]);
                  var path = d3.geo.path().projection(projection);
                  var zoom = d3.behavior
                    .zoom()
                    .translate(projection.translate())
                    .scale(projection.scale())
                    .scaleExtent([height, 800 * height])
                    .on("zoom", zoom);

                  var svg = d3
                    .select(target)
                    .append("svg")
                    .attr("width", width + "px")
                    .attr("height", height + "px")
                    .attr("id", "map")
                    .attr("class", "map");

                  var states = svg.append("g").attr("id", "states").call(zoom);

                  states
                    .append("rect")
                    .attr("class", "background")
                    .attr("width", width + "px")
                    .attr("height", height + "px");

                  //geoJson데이터를 파싱하여 지도그리기
                  d3.json("json/korea.json", function (json) {
                    states
                      .selectAll("path") //지역 설정
                      .data(json.features)
                      .enter()
                      .append("path")
                      .attr("d", path)
                      .attr("id", function (d) {
                        return "path-" + d.properties.name_eng;
                      });

                    labels = states
                      .selectAll("text")
                      .data(json.features) //라벨표시
                      .enter()
                      .append("text")
                      .attr("transform", translateTolabel)
                      .attr("id", function (d) {
                        return "label-" + d.properties.name_eng;
                      })
                      .attr("text-anchor", "middle")
                      .attr("dy", ".35em")
                      .text(function (d) {
                        return d.properties.name;
                      });
                  });


                  //텍스트 위치 조절 - 하드코딩으로 위치 조절을 했습니다.
                  function translateTolabel(d) {
                    var arr = path.centroid(d);
                    if (d.properties.code == 31) {
                      //서울 경기도 이름 겹쳐서 경기도 내리기
                      arr[1] +=
                        d3.event && d3.event.scale
                          ? d3.event.scale / height + 20
                          : initialScale / height + 20;
                    } else if (d.properties.code == 34) {
                      //충남은 조금 더 내리기
                      arr[1] +=
                        d3.event && d3.event.scale
                          ? d3.event.scale / height + 10
                          : initialScale / height + 10;
                    }
                    return "translate(" + arr + ")";
                  }

                  //   function zoom() {
                  //     projection.translate(d3.event.translate).scale(d3.event.scale);
                  //     states.selectAll("path").attr("d", path);
                  //     labels.attr("transform", translateTolabel);
                  //   }
                }

            /*]]>*/
    </script>

    <div style="display: flex; justify-content: center">
      <div id="container"></div>
    </div>
  </div>
</html>
