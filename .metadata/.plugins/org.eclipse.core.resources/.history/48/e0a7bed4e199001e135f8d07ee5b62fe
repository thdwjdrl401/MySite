<html layout:decorate="~{layout}">
  <div layout:fragment="content" class="container my-3">
	  <div th:text="${location}"></div>
    <script type="text/javascript" src="../js/d3.js"></script>
    <script th:inline="javascript">
            	  /*<![CDATA[*/
                window.onload = function () {
            		drawMask("#container");
            	//	putImage("#map");
                   drawMap("#container");

                };
 				 

                function drawMap(target) {
					
					
					 var width = 500; //지도의 넓이
                  var height = 700; //지도의 높이

				var number=[];

				  var location = [[${location}]];



             d3.json("../json/"+location+".json",function(json){
					var initprojection = d3.geo
                    .mercator()
                    .scale(1)
                    .translate([0, 0]);
                  var initpath = d3.geo.path().projection(initprojection);			  //path의 최대 최소 구하기
                  var min_x ;
                  var max_x ;
                  var min_y ;
                  var max_y ;

                  for(var j = 0;j<json.features.length;j++){

                  	var str = initpath(json.features[j]);
                  	str = str.substring(1, str.length-1);

                  	str = str.split("L");
                  	//console.log(str);
					if (j==0){
                  			 min_x= Number(str[0].split(",")[0]);
                  			max_x = Number(str[0].split(",")[0]);
                  			min_y = Number(str[0].split(",")[1]);
                  			max_y = Number(str[0].split(",")[1]);
                  		}
                  	for(var i = 0 ; i<str.length;i++){

                  			if(min_x > Number(str[i].split(",")[0])){
                  					   min_x = Number(str[i].split(",")[0]);
                  			}
                  		   	if(max_x < Number(str[i].split(",")[0])){
                  					   max_x = Number(str[i].split(",")[0]);
      	            		}
         	    	     	if(min_y > Number(str[i].split(",")[1])){
          	        				   min_y = Number(str[i].split(",")[1]);
                  			}
                  		   	if(max_y < Number(str[i].split(",")[1])){
                  					   max_y = Number(str[i].split(",")[1]);
          	        		}
                 		 }
                  }
					
	 // console.log(min_x); console.log(max_x); console.log(min_y);  console.log(max_y);
					number[0] = 450/(max_x-min_x)
					number[1] =  25 - number[0]*min_x
					number[2] =  50 - number[0]*min_y
				 var initialScale = number[0]; //확대시킬 값
                  var initialX = number[1]; //초기 위치값 X
                  var initialY = number[2]; //초기 위치값 Y
                  
                   var projection = d3.geo
                    .mercator()
                    .scale(initialScale)
                    .translate([initialX, initialY]);
                  var path = d3.geo.path().projection(projection);
                  var zoom = d3.behavior
                    .zoom()
                    .translate(projection.translate())
                    .scale(projection.scale())
                    .scaleExtent([height, 800 * height])
                    .on("zoom", zoom);

                  var svg = d3
                    .select(target)
                    .append("svg")
                    .attr("width", width + "px")
                    .attr("height", height + "px")
                    .attr("id", "map")
                    .attr("class", "map");

                  var states = svg.append("g").attr("id", "states").call(zoom);
				
				//지도 그리기
                  states
                    .append("rect")
                    .attr("class", "background")
                    .attr("width", width + "px")
                    .attr("height", height + "px");
                  
  					states
                      .selectAll("path") //지역 설정
                      .data(json.features)
                      .enter()
                      .append("path")
                      .attr("d", path)
                      .attr("id", function (d) {
                        return "path-" + d.properties.SIG_ENG_NM;
                      });
                      
                      
                      
						});

	}
               
                  
               function drawMask(target) {
					
					
					 var width = 500; //지도의 넓이
                  var height = 700; //지도의 높이

				var number=[];

				  var location = [[${location}]];



             d3.json("../json/"+location+".json",function(json){
					var initprojection = d3.geo
                    .mercator()
                    .scale(1)
                    .translate([0, 0]);
                  var initpath = d3.geo.path().projection(initprojection);			  //path의 최대 최소 구하기
                  var min_x ;
                  var max_x ;
                  var min_y ;
                  var max_y ;

                  for(var j = 0;j<json.features.length;j++){

                  	var str = initpath(json.features[j]);
                  	str = str.substring(1, str.length-1);

                  	str = str.split("L");
                  	//console.log(str);
					if (j==0){
                  			 min_x= Number(str[0].split(",")[0]);
                  			max_x = Number(str[0].split(",")[0]);
                  			min_y = Number(str[0].split(",")[1]);
                  			max_y = Number(str[0].split(",")[1]);
                  		}
                  	for(var i = 0 ; i<str.length;i++){

                  			if(min_x > Number(str[i].split(",")[0])){
                  					   min_x = Number(str[i].split(",")[0]);
                  			}
                  		   	if(max_x < Number(str[i].split(",")[0])){
                  					   max_x = Number(str[i].split(",")[0]);
      	            		}
         	    	     	if(min_y > Number(str[i].split(",")[1])){
          	        				   min_y = Number(str[i].split(",")[1]);
                  			}
                  		   	if(max_y < Number(str[i].split(",")[1])){
                  					   max_y = Number(str[i].split(",")[1]);
          	        		}
                 		 }
                  }
					
	 // console.log(min_x); console.log(max_x); console.log(min_y);  console.log(max_y);
					number[0] = 450/(max_x-min_x)
					number[1] =  25 - number[0]*min_x
					number[2] =  50 - number[0]*min_y
				 var initialScale = number[0]; //확대시킬 값
                  var initialX = number[1]; //초기 위치값 X
                  var initialY = number[2]; //초기 위치값 Y
                  
                   var projection = d3.geo
                    .mercator()
                    .scale(initialScale)
                    .translate([initialX, initialY]);
                  var path = d3.geo.path().projection(projection);
                  var zoom = d3.behavior
                    .zoom()
                    .translate(projection.translate())
                    .scale(projection.scale())
                    .scaleExtent([height, 800 * height])
                    .on("zoom", zoom);

                  var svg = d3
                    .select(target)
                    .append("svg")
                    .attr("width", width + "px")
                    .attr("height", height + "px")
                    .attr("id", "map")
                    .attr("class", "map");

                  var states = svg.append("g").attr("id", "states").call(zoom);
				
				//지도 그리기
                  states
                    .append("rect")
                    .attr("class", "background")
                    .attr("width", width + "px")
                    .attr("height", height + "px");
                  
  			 //mask  그리기
                    		states
                    		.append("defs")
                    		.selectAll("clipPath")
                    		.data(json.features)
                          .enter()
                          .append("clipPath")
                          .attr("id", function (d) {
                              return "mask-" + d.properties.SIG_ENG_NM;
                            })
                          .append("path")
                          .attr("d", path)
                          .attr("id", function (d) {
                              return "path-" + d.properties.SIG_ENG_NM;});
                      


                         
                      
						});

	}

   

              

            /*]]>*/
    </script>

    <div style="display: flex; justify-content: center">
      <div id="container"></div>
    </div>
  </div>
</html>
