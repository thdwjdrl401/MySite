package com.example.test.map;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.example.test.home.HomeImage;
import com.example.test.home.HomeImageResponseDTO;
import com.example.test.home.HomeImageUploadDTO;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
@RequiredArgsConstructor
public class MapImageService {
	private final MapImageRepository mapImageRepository;
	@Value("${file.mapImagePath}")
	private String uploadFolder;

	public void upload(HomeImageUploadDTO imageUploadDTO) {
		MultipartFile file = imageUploadDTO.getFile();

		UUID uuid = UUID.randomUUID();
		String imageFileName = uuid + "_" + file.getOriginalFilename();

		File destinationFile = new File(uploadFolder + imageFileName);

		try {
			file.transferTo(destinationFile);
			List<MapImage> mapImageIsNull = mapImageRepository.findAll();
			MapImage mapImage;
			if (mapImageIsNull.isEmpty() != true) {
				// 이미지가 이미 존재하면 url 업데이트
				File deletefile = new File("C:/Temp" + mapImageRepository.getReferenceById(1).getUrl());
				if (deletefile.exists() == false)
					deletefile = new File("home/lazy/Temp" + mapImageRepository.getReferenceById(1).getUrl());
				deletefile.delete();
				mapImage = mapImageRepository.getReferenceById(1);
				mapImage.updateUrl("/mapImage/" + imageFileName);

			} else {
//			 이미지가 없으면 객체 생성 후 저장
				mapImage = MapImage.builder().url("/mapImage/" + imageFileName).build();

			}
			mapImageRepository.save(mapImage);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	public MapImageResponseDTO getImageDTO() {
		String defaultImageUrl = "/mapImage/black.png";
		List<String> Location = Arrays.asList("Seoul", "Busan", "Deagu", "Incheon", "Gwangju", "Daejeon", "Ulsan",
				"Sejong", "Gyeonggi-do", "Gangwon-do", "Chungcheongbuk-do", "Chungcheongnam-do", "Jeollabuk-do",
				"Jeollanam-do", "Gyeongsangbuk-do", "Gyeongsangnam-do", "Jeju-do");
			List<MapImage> imageList = mapImageRepository.findAll();
		for (int i = 1; i <= 17; i++) {

			try {
				MapImage image = mapImageRepository.getReferenceById(i);

				if (image.getUrl() == null) {

					image.setId(i);

					image.setLocation(Location.get(i-1));

					image.setUrl(defaultImageUrl);

					mapImageRepository.save(image);

				}
				
				imageList.set(i-1, image);
			} catch (Exception e) {
				
				MapImage image = new MapImage();

				image.setLocation(Location.get(i-1));

				image.setUrl(defaultImageUrl);

				this.mapImageRepository.save(image);


			}

		}
		
		return MapImageResponseDTO.builder().mapImage(imageList).build();

	}
	
	public MapImageResponseDTO getImageDTO(String location) {
		
			MapImage imageList = mapImageRepository.findByLocation();
		for (int i = 1; i <= 17; i++) {

			try {
				MapImage image = mapImageRepository.getReferenceById(i);

				if (image.getUrl() == null) {

					image.setId(i);

					image.setLocation(Location.get(i-1));

					image.setUrl(defaultImageUrl);

					mapImageRepository.save(image);

				}
				
				imageList.set(i-1, image);
			} catch (Exception e) {
				
				MapImage image = new MapImage();

				image.setLocation(Location.get(i-1));

				image.setUrl(defaultImageUrl);

				this.mapImageRepository.save(image);


			}

		}
		
		return MapImageResponseDTO.builder().mapImage(imageList).build();

	}
}
